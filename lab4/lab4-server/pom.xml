<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>guldilin</groupId>
        <artifactId>lab4</artifactId>
        <version>1.2.0</version>
    </parent>

    <artifactId>lab4-server</artifactId>
    <packaging>war</packaging>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- CDI 2.0 with SE context loader (for executable jar packaging) -->
        <dependency>
            <groupId>org.jboss.weld.se</groupId>
            <artifactId>weld-se-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.weld.servlet</groupId>
            <artifactId>weld-servlet-core</artifactId>
        </dependency>
        <!-- /CDI 2.0 -->

        <!-- Jakarta EE -->
        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.ejb</groupId>
            <artifactId>jakarta.ejb-api</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.inject</groupId>
            <artifactId>jakarta.inject-api</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>5.0.0</version>
            <scope>provided</scope>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>jakarta.annotation</groupId>-->
<!--            <artifactId>jakarta.annotation-api</artifactId>-->
<!--        </dependency>-->
        <!-- /Jakarta EE -->

        <!-- logging -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
        </dependency>
        <!-- /logging -->

        <!-- Database Driver -->
        <dependency>
            <groupId>${postgres.driver.groupId}</groupId>
            <artifactId>${postgres.driver.artifactId}</artifactId>
        </dependency>
        <!-- /Database Driver -->

        <!-- Persistence API -->
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
        </dependency>
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
        </dependency>
        <!-- /Persistence API -->

        <!-- Persistence API Implementation -->
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>
        <!-- /Persistence API Implementation -->

        <!-- database migrations -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <!-- /database migrations -->

        <!-- JAX-RS -->
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>jakarta.ws.rs</groupId>-->
<!--            <artifactId>all</artifactId>-->
<!--            <type>pom</type>-->
<!--        </dependency>-->
        <!-- /JAX-RS -->

<!--        <dependency>-->
<!--            <groupId>io.swagger.core.v3</groupId>-->
<!--            <artifactId>swagger-jaxrs2-jakarta</artifactId>-->
<!--        </dependency>-->
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-jaxrs2-jakarta</artifactId>
            <version>2.2.20</version>
        </dependency>
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-jaxrs2-servlet-initializer-v2-jakarta</artifactId>
            <version>2.2.20</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>io.swagger.core.v3</groupId>-->
<!--            <artifactId>swagger-jaxrs2-servlet-initializer-v2-jakarta</artifactId>-->
<!--            <version>2.2.20</version>-->
<!--        </dependency>-->
<!--        &lt;!&ndash; https://mvnrepository.com/artifact/jakarta.servlet/jakarta.servlet-api &ndash;&gt;-->

<!--        <dependency>-->
<!--            <groupId>org.glassfish.jersey.inject</groupId>-->
<!--            <artifactId>jersey-hk2</artifactId>-->
<!--            <scope>provided</scope>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.glassfish.jersey.ext.cdi</groupId>-->
<!--            <artifactId>jersey-cdi1x</artifactId>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.glassfish.jersey.ext.cdi</groupId>-->
<!--            <artifactId>jersey-cdi1x-servlet</artifactId>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.glassfish.jersey.ext.cdi</groupId>-->
<!--            <artifactId>jersey-weld2-se</artifactId>-->
<!--        </dependency>-->

        <!-- Grizzly Server for SE Standalone app -->
<!--        <dependency>-->
<!--            <groupId>org.glassfish.grizzly</groupId>-->
<!--            <artifactId>grizzly-http-server</artifactId>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.glassfish.jersey.containers</groupId>-->
<!--            <artifactId>jersey-container-servlet</artifactId>-->
<!--        </dependency>-->
<!--        <dependency> &lt;!&ndash; this is to avoid Jersey jars to be bundled with the WAR &ndash;&gt;-->
<!--            <groupId>org.glassfish.jersey.containers</groupId>-->
<!--            <artifactId>jersey-container-servlet-core</artifactId>-->
<!--            <scope>provided</scope>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.glassfish.jersey.containers</groupId>-->
<!--            <artifactId>jersey-container-grizzly2-http</artifactId>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.glassfish.jersey.core</groupId>-->
<!--            <artifactId>jersey-server</artifactId>-->
<!--        </dependency>-->

        <!-- /Grizzly Server-->

        <!-- CLI wrapper -->
        <dependency>
            <groupId>com.beust</groupId>
            <artifactId>jcommander</artifactId>
            <version>1.82</version>
        </dependency>
        <!-- /CLI wrapper -->
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <!-- Read properties from parent dir -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <inherited>false</inherited>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <files>
                        <file>../../configuration.properties</file>
                    </files>
                    <properties/>
                </configuration>
            </plugin>
            <!-- /Read properties from parent dir -->

            <!-- Index beans-->
            <plugin>
                <!-- https://github.com/wildfly/jandex-maven-plugin -->
                <groupId>io.smallrye</groupId>
                <artifactId>jandex-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make-index</id>
                        <goals>
                            <!-- phase is 'process-classes by default' -->
                            <goal>jandex</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>uberjar-index</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jandex-jar</goal>
                        </goals>
                        <configuration>
                            <jar>${project.build.directory}/${project.build.finalName}.jar</jar>
                            <includes>
                                <include>guldilin/**/*.class</include>
                            </includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- /Index beans-->

            <!-- Package to WAR-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <outputFileNameMapping>@{artifactId}@.@{extension}@</outputFileNameMapping>
                    <attachClasses>true</attachClasses>
                    <packagingExcludes>
                        WEB-INF/classes/guldilin/cli/*,
                        WEB-INF/lib/weld-*.jar,
                        WEB-INF/lib/grizzly-*.jar,
                        WEB-INF/lib/jersey-*.jar
                    </packagingExcludes>
                </configuration>
            </plugin>
            <!-- /Package to WAR-->

<!--            &lt;!&ndash; Package to JAR&ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-assembly-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    <appendAssemblyId>false</appendAssemblyId>-->
<!--                    <archive>-->
<!--                        <manifest>-->
<!--                            <mainClass>guldilin.cli.Standalone</mainClass>-->
<!--                        </manifest>-->
<!--                    </archive>-->
<!--                    <descriptorRefs>-->
<!--                        <descriptorRef>jar-with-dependencies</descriptorRef>-->
<!--                    </descriptorRefs>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        &lt;!&ndash; Do not change to package, it won't include project classes for unknown reason&ndash;&gt;-->
<!--                        <phase>prepare-package</phase>-->
<!--                        <goals>-->
<!--                            <goal>single</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
<!--            &lt;!&ndash; /Package to JAR &ndash;&gt;-->
            <!-- Generate OpenApi config-->
            <plugin>
                <groupId>io.swagger.core.v3</groupId>
                <artifactId>swagger-maven-plugin-jakarta</artifactId>
                <version>2.2.20</version>
                <configuration>
                    <outputFileName>openapi</outputFileName>
                    <outputPath>${project.build.directory}/openapi</outputPath>
                    <outputFormat>JSONANDYAML</outputFormat>
                    <resourcePackages>
                        <package>guldilin</package>
                    </resourcePackages>
                    <prettyPrint>TRUE</prettyPrint>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>resolve</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/classes/</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}/openapi</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Generate OpenApi config  -->

            <!-- Deployment -->
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <configuration>
                    <hostname>${wildfly.hostname}</hostname>
                    <port>${wildfly.port}</port>
                    <username>${wildfly.username}</username>
                    <password>${wildfly.username}</password>
                    <commands>
                        <!-- Set system property for application database config -->
                        <command>
                            /system-property=DB_JNDI_NAME:write-attribute(name="value",value="${postgres.db.jndi}")
                            /system-property=DB_HOST:write-attribute(name="value",value="${postgres.db.host}")
                            /system-property=DB_USERNAME:write-attribute(name="value",value="${postgres.db.username}")
                            /system-property=DB_PASSWORD:write-attribute(name="value",value="${postgres.db.password}")
                        </command>
                    </commands>
                </configuration>
                <executions>
                    <!-- Deploy the JDBC library -->
                    <execution>
                        <id>deploy-driver</id>
                        <phase>install</phase>
                        <goals>
                            <goal>deploy-artifact</goal>
                        </goals>
                        <configuration>
                            <groupId>${postgres.driver.groupId}</groupId>
                            <artifactId>${postgres.driver.artifactId}</artifactId>
                            <name>${postgres.driver.name}</name>
                        </configuration>
                    </execution>

                    <!-- Add a data source -->
                    <execution>
                        <id>add-datasource</id>
                        <phase>install</phase>
                        <goals>
                            <goal>add-resource</goal>
                        </goals>
                        <configuration>
                            <address>subsystem=datasources,data-source=${postgres.db.jndi}</address>
                            <force>true</force>
                            <resources>
                                <resource>
                                    <properties>
                                        <jta>true</jta>
                                        <jndi-name>${postgres.db.jndi}</jndi-name>
                                        <enabled>true</enabled>
                                        <connection-url>${postgres.db.url}</connection-url>
                                        <driver-class>org.postgresql.Driver</driver-class>
                                        <driver-name>${postgres.driver.name}</driver-name>
                                        <user-name>${postgres.db.username}</user-name>
                                        <password>${postgres.db.password}</password>
                                    </properties>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                    <execution>
                        <id>deploy</id>
                        <phase>install</phase>
                        <goals>
                            <goal>deploy</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- /Deployment -->
        </plugins>
    </build>
</project>
